{"version":3,"sources":["img/apple.png","img/bananas.png","img/brocoli.png","img/Carrot.png","img/cucumber.png","img/lime.png","img/orange.png","img/Strawberry.png","img/Tomatoes.png","img/watermelon.png","Hooks/useKeyPressState.js","helpers/FruitGenerator.js","Fruit.js","Fruits.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","useKeyPressState","randomValue","useState","state","setState","Math","floor","random","setRand","useEffect","randomItems","window","addEventListener","e","keyCode","setTimeout","newRandomVal","newRa","avoidDuplicates","console","log","allFruits","name","image","Apple","Banana","Brocoli","Carrot","Cucumber","Lime","Orange","Strawberry","Tomatoes","Watermelon","useStyles","makeStyles","fruitContainer","height","display","flexDirection","alignItems","padding","overflow","header","fontSize","fontWeight","textTransform","letterSpacing","imgContainer","width","border","borderStyle","borderRadius","boxShadow","textAlign","img","marginTop","Fruit","iskeyPressed","classes","className","class","src","alt","Fruits","root","background","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.69b62d97.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/apple.e148eb42.png\";","module.exports = __webpack_public_path__ + \"static/media/bananas.90fda5eb.png\";","module.exports = __webpack_public_path__ + \"static/media/brocoli.eb7d9ade.png\";","module.exports = __webpack_public_path__ + \"static/media/Carrot.4c44d6fe.png\";","module.exports = __webpack_public_path__ + \"static/media/cucumber.bb207dc4.png\";","module.exports = __webpack_public_path__ + \"static/media/lime.2f4425df.png\";","module.exports = __webpack_public_path__ + \"static/media/orange.101a4987.png\";","module.exports = __webpack_public_path__ + \"static/media/Strawberry.2b26f2d1.png\";","module.exports = __webpack_public_path__ + \"static/media/Tomatoes.f0ff3176.png\";","module.exports = __webpack_public_path__ + \"static/media/watermelon.45e198ac.png\";","import {useState, useEffect} from 'react';\r\n\r\nexport default function useKeyPressState(randomValue) {\r\n  const [state, setState] = useState(false);\r\n  const [random, setRand] = useState(Math.floor(Math.random() * randomValue));\r\n  \r\n  useEffect(() => {\r\n    let randomItems = randomValue;\r\n\r\n    const avoidDuplicates = (random) => {\r\n      let newRa = Math.floor(Math.random() * randomItems);\r\n      while(random === newRa){\r\n        newRa = Math.floor(Math.random() * randomItems);\r\n      }\r\n  \r\n      return newRa;\r\n    };\r\n\r\n    window.addEventListener('keypress', e => {\r\n      if(e.keyCode === 32){\r\n        setTimeout(() => {\r\n          setState(false);\r\n        }, 500);\r\n        setState(true);\r\n        let num = Math.floor(Math.random() * randomItems);\r\n        let newRandomVal = avoidDuplicates(num);\r\n        setRand(newRandomVal);\r\n        // console.log('randoom ', num);\r\n        console.log('new random ', newRandomVal);\r\n      }\r\n    });\r\n  }, []);\r\n\r\n  return [state, random];\r\n}","import Apple from '../img/apple.png';\r\nimport Banana from '../img/bananas.png';\r\nimport Brocoli from '../img/brocoli.png';\r\nimport Carrot from '../img/Carrot.png';\r\nimport Cucumber from '../img/cucumber.png';\r\nimport Lime from '../img/lime.png';\r\nimport Orange from '../img/orange.png';\r\nimport Strawberry from '../img/Strawberry.png';\r\nimport Tomatoes from '../img/Tomatoes.png';\r\nimport Watermelon from '../img/watermelon.png';\r\n\r\nexport default function allFruits(){\r\n    return [\r\n        {name: \"Tufaax\", image: Apple},\r\n        {name: \"Moos\", image: Banana},\r\n        {name: \"Brocoli\", image: Brocoli},\r\n        {name: \"Karoot\", image: Carrot},\r\n        {name: \"Qajaar\", image: Cucumber},\r\n        {name: \"Liin Dhanaan\", image: Lime},\r\n        {name: \"Liin Macaan\", image: Orange},\r\n        {name: \"Faroole\", image: Strawberry},\r\n        {name: \"Yaanyo\", image: Tomatoes},\r\n        {name: \"Qare\", image: Watermelon}\r\n    ]\r\n};","import React from 'react';\r\nimport allFruits from './helpers/FruitGenerator';\r\nimport { makeStyles } from '@material-ui/styles';\r\nimport './styles/Fruit.css';\r\n\r\nconst useStyles = makeStyles({\r\n  fruitContainer: {\r\n    height: '100%',\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n    padding: '0 3rem',\r\n    overflow: 'hidden'\r\n  },\r\n\r\n  header: {\r\n      fontSize: '3.4rem',\r\n      fontWeight: 'normal',\r\n      textTransform: \"uppercase\",\r\n      letterSpacing: '1px'\r\n  },\r\n\r\n  imgContainer: {\r\n    height: '300px',\r\n    width: '350px',\r\n    border: '4px solid rgba(247, 247, 247, 0.5)',\r\n    borderStyle: 'outset',\r\n    borderRadius: '10px',\r\n    boxShadow: '2px 5px 20px rgba(0, 0, 0, 0.3)',\r\n    textAlign: 'center',\r\n    padding: '1rem',\r\n\r\n    '&:hover': {\r\n        boxShadow: '1px 3px 15px rgba(0, 0, 0, 0.3)'\r\n    }\r\n  },\r\n\r\n  img: {\r\n    height: '100%',\r\n    width: '100%'\r\n  }, \r\n\r\n  name: {\r\n      fontSize: '3rem',\r\n      marginTop: '3rem',\r\n      textTransform: \"uppercase\",\r\n      letterSpacing: '1px'\r\n  }\r\n});\r\n\r\nexport default function Fruit({random, iskeyPressed}){\r\n    let name = allFruits()[random][\"name\"];\r\n    let image = allFruits()[random].image;\r\n    const classes = useStyles();\r\n    return(\r\n        <div className={classes.fruitContainer}>\r\n            <h1 className={classes.header}>Fruits and vegetables</h1>\r\n            <div className={classes.imgContainer}>\r\n              {iskeyPressed ?\r\n              <div class=\"lds-ripple\"><div></div><div></div></div>\r\n              : <img className={classes.img} src={image} alt={name} />}\r\n                \r\n            </div>\r\n            <p className={classes.name}>{name}</p>\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\nimport useKeyPressState from './Hooks/useKeyPressState';\r\nimport Fruit from './Fruit';\r\n\r\nexport default function Fruits(){\r\n    //const random = useRandomState(0);\r\n    const [iskeyPressed, random] = useKeyPressState(10);\r\n    return(\r\n        <Fruit random={random} iskeyPressed={iskeyPressed}/>\r\n    )\r\n}","import React from 'react';\nimport Fruits from './Fruits';\nimport { makeStyles } from '@material-ui/styles';\n\nconst useStyles = makeStyles({\n  root: {\n    height: '100vh',\n    width: '100vw',\n    background: 'linear-gradient(45deg, rgba(254,107,139, 0.5) 30%, rgba(255,142,83,0.5) 90%)',\n    display: 'flex',\n    alignItems: 'center',\n    flexDirection: 'column',\n    overflow: 'hidden'\n  }\n});\n\nfunction App() {\n  const classes = useStyles();\n  return (\n    <div className={classes.root}>\n      <Fruits />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}